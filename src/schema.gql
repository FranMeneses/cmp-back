# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Valley {
  id: Int!
  name: String
}

type Origin {
  id: Int!
  name: String
}

type Investment {
  id: Int!
  line: String
}

type Type {
  id: Int!
  name: String
}

type Scope {
  id: Int!
  name: String
}

type Interaction {
  id: Int!
  operation: String
}

type Risk {
  id: Int!
  type: String
}

type Process {
  id: Int!
  name: String!
}

type MonthlyBudget {
  month: String!
  budget: Float!
}

type MonthlyExpense {
  month: String!
  expense: Float!
}

type Faena {
  id: Int!
  name: String
}

type TaskStatus {
  id: Int!
  name: String
}

type ComplianceStatus {
  id: Int!
  name: String
  days: Int
}

type Beneficiary {
  id: ID!
  legalName: String
  rut: String
  address: String
  entityType: String
  representative: String
  hasLegalPersonality: Boolean
  contacts: [Contact!]
  subtasks: [Subtask!]
}

type Contact {
  id: ID!
  name: String
  position: String
  email: String
  phone: String
  beneficiary: Beneficiary
}

type SubtaskStatus {
  id: Int!
  name: String
  percentage: Int!
}

type Priority {
  id: Int!
  name: String
}

type Subtask {
  id: ID!
  taskId: ID!
  name: String
  description: String
  budget: Int
  expense: Int
  startDate: DateTime
  endDate: DateTime
  finalDate: DateTime
  beneficiaryId: ID
  statusId: Int
  priorityId: Int
  beneficiary: Beneficiary
  status: SubtaskStatus
  priority: Priority
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Task {
  id: ID!
  name: String
  description: String
  valleyId: Int
  faenaId: Int
  processId: Int
  statusId: Int
  valley: Valley
  faena: Faena
  process: Process
  status: TaskStatus
  subtasks: [Subtask!]
  compliances: [Compliance!]
}

type InfoTask {
  id: ID!
  taskId: ID!
  originId: Int
  investmentId: Int
  typeId: Int
  scopeId: Int
  interactionId: Int
  riskId: Int
  task: Task
  origin: Origin
  investment: Investment
  type: Type
  scope: Scope
  interaction: Interaction
  risk: Risk
}

type Compliance {
  id: ID!
  taskId: ID!
  statusId: Int
  applies: Boolean
  task: Task
  status: ComplianceStatus
  registries: [Registry!]
}

type Registry {
  id: ID!
  complianceId: ID!
  hes: Boolean
  hem: Boolean
  provider: String
  startDate: DateTime
  endDate: DateTime
  compliance: Compliance
  memos: [Memo!]
  solpeds: [Solped!]
}

type Memo {
  id: ID!
  registryId: ID!
  value: Int
  registry: Registry
}

type Solped {
  id: ID!
  registryId: ID!
  ceco: Int
  account: Int
  value: Int
  registry: Registry
}

type TipoDocumento {
  id_tipo_documento: Int!
  tipo_documento: String
}

type Document {
  id_documento: ID!
  id_tarea: String
  id_subtarea: String
  tipo_documento: Int!
  ruta: String
  fecha_carga: DateTime
  nombre_archivo: String
  tarea: Task
  subtarea: Subtask
  tipo_doc: TipoDocumento!
}

"""File upload scalar type"""
scalar Upload

type Query {
  tasks: [Task!]!
  task(id: ID!): Task!
  processes: [Process!]!
  tasksByProcess(processId: Int!): [Task!]!
  taskSubtasks(id: ID!): [Subtask!]!
  taskProgress(id: ID!): Float!
  taskTotalBudget(id: ID!): Float!
  taskTotalExpense(id: ID!): Float!
  valleyTasksCount(valleyId: Int!): Int!
  valleySubtasks(valleyId: Int!): [Subtask!]!
  totalBudgetByMonth(monthName: String!, year: Int!): Float!
  totalExpenseByMonth(monthName: String!, year: Int!): Float!
  totalBudgetByMonthAndValley(monthName: String!, year: Int!, valleyId: Int!): Float!
  totalExpenseByMonthAndValley(monthName: String!, year: Int!, valleyId: Int!): Float!
  tasksByValley(valleyId: Int!): [Task!]!
  valleyInvestmentTasksCount(valleyId: Int!, investmentId: Int!): Int!
  valleys: [Valley!]!
  faenas: [Faena!]!
  valleyMonthlyBudgets(valleyId: Int!, year: Int!): [MonthlyBudget!]!
  valleyMonthlyExpenses(valleyId: Int!, year: Int!): [MonthlyExpense!]!
  taskStatuses: [TaskStatus!]!
  tasksByValleyAndStatus(valleyId: Int!, statusId: Int!): [Task!]!
  tasksByProcessAndValley(processId: Int!, valleyId: Int!): [Task!]!
  tasksByProcessAndStatus(processId: Int!, statusId: Int!): [Task!]!
  subtasksByProcess(processId: Int!): [Subtask!]!
  tasksByProcessWithCompliance(processId: Int!): [Task!]!
  subtasks: [Subtask!]!
  subtask(id: ID!): Subtask!
  priorities: [Priority!]!
  subtaskStatuses: [SubtaskStatus!]!
  subtasksByMonthYearAndValley(monthName: String!, year: Int!, valleyId: Int!): [Subtask!]!
  findAll: [Compliance!]!
  findOne(id: ID!): Compliance
  getTaskCompliance(id: ID!): Compliance
  getAllComplianceStatuses: [ComplianceStatus!]!
  findAllRegistries: [Registry!]!
  findOneRegistry(id: ID!): Registry
  getComplianceRegistries(complianceId: ID!): [Registry!]!
  findAllSolpeds: [Solped!]!
  findOneSolped(id: ID!): Solped
  getRegistrySolped(registryId: ID!): Solped
  findAllMemos: [Memo!]!
  findOneMemo(id: ID!): Memo
  getRegistryMemo(registryId: ID!): Memo
  getAppliedCompliances: [Compliance!]!
  beneficiaries: [Beneficiary!]!
  beneficiary(id: ID!): Beneficiary!
  contacts: [Contact!]!
  contact(id: ID!): Contact!
  infoTasks: [InfoTask!]!
  infoTask(id: ID!): InfoTask!
  taskInfo(id: ID!): InfoTask!
  investmentTasksCount(investmentId: Int!): Int!
  origins: [Origin!]!
  origin(id: Int!): Origin!
  investments: [Investment!]!
  investment(id: Int!): Investment!
  types: [Type!]!
  type(id: Int!): Type!
  scopes: [Scope!]!
  scope(id: Int!): Scope!
  interactions: [Interaction!]!
  interaction(id: Int!): Interaction!
  risks: [Risk!]!
  risk(id: Int!): Risk!
  documents(tipo_documento: Int): [Document!]!
  document(id_documento: String!): Document!
  getAllDocumentTypes: [TipoDocumento!]!
  documentByTaskAndType(taskId: String!, documentType: Int!): Document
}

type Mutation {
  createTask(input: CreateTaskDto!): Task!
  updateTask(id: ID!, input: UpdateTaskDto!): Task!
  removeTask(id: ID!): Task!
  createSubtask(input: CreateSubtaskDto!): Subtask!
  updateSubtask(id: ID!, input: UpdateSubtaskDto!): Subtask!
  removeSubtask(id: ID!): Subtask!
  create(createComplianceInput: CreateComplianceInput!): Compliance!
  update(id: ID!, updateComplianceInput: UpdateComplianceInput!): Compliance!
  remove(id: ID!): Compliance!
  createRegistry(createRegistryInput: CreateRegistryInput!): Registry!
  updateRegistry(id: ID!, updateRegistryInput: UpdateRegistryInput!): Registry!
  removeRegistry(id: ID!): Registry!
  createSolped(createSolpedInput: CreateSolpedInput!): Solped!
  updateSolped(id: ID!, updateSolpedInput: UpdateSolpedInput!): Solped!
  removeSolped(id: ID!): Solped!
  createMemo(createMemoInput: CreateMemoInput!): Memo!
  updateMemo(id: ID!, updateMemoInput: UpdateMemoInput!): Memo!
  removeMemo(id: ID!): Memo!
  createBeneficiary(input: CreateBeneficiaryDto!): Beneficiary!
  updateBeneficiary(id: ID!, input: UpdateBeneficiaryDto!): Beneficiary!
  removeBeneficiary(id: ID!): Beneficiary!
  createContact(input: CreateContactDto!): Contact!
  updateContact(id: ID!, input: UpdateContactDto!): Contact!
  removeContact(id: ID!): Contact!
  createInfoTask(createInfoTaskInput: CreateInfoTaskInput!): InfoTask!
  updateInfoTask(id: ID!, updateInfoTaskInput: UpdateInfoTaskInput!): InfoTask!
  removeInfoTask(id: ID!): InfoTask!
  createDocument(input: CreateDocumentInput!): Document!
  deleteDocument(id_documento: String!): Boolean!
}

input CreateTaskDto {
  name: String
  description: String
  valleyId: Int
  faenaId: Int
  processId: Int
  statusId: Int
}

input UpdateTaskDto {
  name: String
  description: String
  valleyId: Int
  faenaId: Int
  processId: Int
  statusId: Int
}

input CreateSubtaskDto {
  taskId: ID!
  name: String
  description: String
  budget: Int
  expense: Int
  startDate: DateTime
  endDate: DateTime
  finalDate: DateTime
  beneficiaryId: ID
  statusId: Int
  priorityId: Int
}

input UpdateSubtaskDto {
  name: String
  description: String
  taskId: ID
  statusId: Int
  priorityId: Int
  beneficiaryId: ID
  budget: Int
  expense: Int
  startDate: DateTime
  endDate: DateTime
  finalDate: DateTime
}

input CreateComplianceInput {
  taskId: ID!
  statusId: Int
  applies: Boolean
}

input UpdateComplianceInput {
  taskId: ID
  statusId: Int
  applies: Boolean
}

input CreateRegistryInput {
  complianceId: ID!
  hes: Boolean
  hem: Boolean
  provider: String
  startDate: DateTime
  endDate: DateTime
}

input UpdateRegistryInput {
  complianceId: ID
  hes: Boolean
  hem: Boolean
  provider: String
  startDate: DateTime
  endDate: DateTime
}

input CreateSolpedInput {
  registryId: ID!
  ceco: Int
  account: Int
  value: Int
}

input UpdateSolpedInput {
  registryId: ID
  ceco: Int
  account: Int
  value: Int
}

input CreateMemoInput {
  registryId: ID!
  value: Int
}

input UpdateMemoInput {
  registryId: ID
  value: Int
}

input CreateBeneficiaryDto {
  legalName: String
  rut: String
  address: String
  entityType: String
  representative: String
  hasLegalPersonality: Boolean
}

input UpdateBeneficiaryDto {
  legalName: String
  rut: String
  address: String
  entityType: String
  representative: String
  hasLegalPersonality: Boolean
}

input CreateContactDto {
  beneficiaryId: ID!
  name: String
  position: String
  email: String
  phone: String
}

input UpdateContactDto {
  beneficiaryId: ID
  name: String
  position: String
  email: String
  phone: String
}

input CreateInfoTaskInput {
  taskId: ID!
  originId: Int
  investmentId: Int
  typeId: Int
  scopeId: Int
  interactionId: Int
  riskId: Int
}

input UpdateInfoTaskInput {
  taskId: ID
  originId: Int
  investmentId: Int
  typeId: Int
  scopeId: Int
  interactionId: Int
  riskId: Int
}

input CreateDocumentInput {
  tipo_documento: Int!
  ruta: String!
  id_tarea: String
  id_subtarea: String
  nombre_archivo: String
}