# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Valley {
  id: Int!
  name: String
}

type Origin {
  id: Int!
  name: String
}

type Investment {
  id: Int!
  line: String
}

type Type {
  id: Int!
  name: String
}

type Scope {
  id: Int!
  name: String
}

type Interaction {
  id: Int!
  operation: String
}

type Risk {
  id: Int!
  type: String
}

type Process {
  id: Int!
  name: String!
}

type MonthlyBudget {
  month: String!
  budget: Float!
}

type MonthlyExpense {
  month: String!
  expense: Float!
}

type Faena {
  id: Int!
  name: String
}

type TaskStatus {
  id: Int!
  name: String
}

type ComplianceStatus {
  id: Int!
  name: String
  days: Int
}

type Beneficiary {
  id: ID!
  legalName: String
  rut: String
  address: String
  entityType: String
  representative: String
  hasLegalPersonality: Boolean
  contacts: [Contact!]
  tasks: [Task!]
}

type Contact {
  id: ID!
  name: String
  position: String
  email: String
  phone: String
  beneficiary: Beneficiary
}

type SubtaskStatus {
  id: Int!
  name: String
  percentage: Int!
}

type Priority {
  id: Int!
  name: String
}

type Subtask {
  id: ID!
  taskId: ID!
  name: String
  description: String
  budget: Int
  expense: Int
  startDate: DateOnly
  endDate: DateOnly
  finalDate: DateOnly
  statusId: Int
  priorityId: Int
  status: SubtaskStatus
  priority: Priority
}

type Task {
  id: ID!
  name: String
  description: String
  valleyId: Int
  faenaId: Int
  processId: Int
  statusId: Int
  applies: Boolean
  beneficiaryId: ID
  valley: Valley
  faena: Faena
  process: Process
  status: TaskStatus
  beneficiary: Beneficiary
  subtasks: [Subtask!]
  compliances: [Compliance!]
}

type InfoTask {
  id: ID!
  taskId: ID!
  originId: Int
  investmentId: Int
  typeId: Int
  scopeId: Int
  interactionId: Int
  riskId: Int
  task: Task
  origin: Origin
  investment: Investment
  type: Type
  scope: Scope
  interaction: Interaction
  risk: Risk
}

type Compliance {
  id: ID!
  taskId: ID!
  statusId: Int
  updatedAt: DateTime!
  valor: Int
  ceco: Int
  cuenta: Int
  solpedMemoSap: Int
  hesHemSap: Int
  listo: Boolean
  task: Task
  status: ComplianceStatus
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TipoDocumento {
  id_tipo_documento: Int!
  tipo_documento: String
}

type Document {
  id_documento: ID!
  id_tarea: String
  tipo_documento: Int!
  ruta: String
  fecha_carga: DateOnly
  nombre_archivo: String
  tarea: Task
  tipo_doc: TipoDocumento!
}

type History {
  id: ID!
  name: String
  processId: Int
  finalDate: DateOnly
  totalExpense: Int
  valleyId: Int
  faenaId: Int
  solpedMemoSap: Int
  hesHemSap: Int
  beneficiaryId: ID
  process: Process
  valley: Valley
  faena: Faena
  beneficiary: Beneficiary
  documents: [HistoryDoc!]
}

type HistoryDoc {
  id: ID!
  historyId: ID!
  fileName: String
  documentTypeId: Int!
  path: String
  uploadDate: DateOnly
  history: History!
  documentType: TipoDocumento!
}

type Rol {
  id_rol: Int!
  nombre: String!
}

type User {
  id_usuario: ID!
  email: String!
  full_name: String!
  id_rol: Int!
  organization: String
  is_active: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  last_login: DateTime
  rol: Rol!
}

type AuthResponse {
  access_token: String!
  user: User!
}

type PasswordResetResponse {
  success: Boolean!
  message: String!
}

type TokenValidationResponse {
  valid: Boolean!
  message: String
}

type Notification {
  id_notificacion: ID!
  id_usuario: ID!
  titulo: String!
  mensaje: String!
  leida: Boolean!
  read_at: DateTime
  created_at: DateTime!
  id_tarea: ID
}

type NotificationResponse {
  success: Boolean!
  message: String
}

"""File upload scalar type"""
scalar Upload

"""Date scalar type (without time)"""
scalar DateOnly

type Query {
  tasks: [Task!]!
  task(id: ID!): Task!
  processes: [Process!]!
  tasksByProcess(processId: Int!): [Task!]!
  taskSubtasks(id: ID!): [Subtask!]!
  taskProgress(id: ID!): Float!
  taskTotalBudget(id: ID!): Float!
  taskTotalExpense(id: ID!): Float!
  valleyTasksCount(valleyId: Int!): Int!
  valleySubtasks(valleyId: Int!): [Subtask!]!
  totalBudgetByMonth(monthName: String!, year: Int!): Float!
  totalExpenseByMonth(monthName: String!, year: Int!): Float!
  totalBudgetByMonthAndProcess(monthName: String!, year: Int!, processId: Int!): Float!
  totalExpenseByMonthAndProcess(monthName: String!, year: Int!, processId: Int!): Float!
  tasksByValley(valleyId: Int!): [Task!]!
  valleyInvestmentTasksCount(valleyId: Int!, investmentId: Int!): Int!
  valleys: [Valley!]!
  faenas: [Faena!]!
  processMonthlyBudgets(processId: Int!, year: Int!): [MonthlyBudget!]!
  processMonthlyExpenses(processId: Int!, year: Int!): [MonthlyExpense!]!
  taskStatuses: [TaskStatus!]!
  tasksByValleyAndStatus(valleyId: Int!, statusId: Int!): [Task!]!
  tasksByProcessAndValley(processId: Int!, valleyId: Int!): [Task!]!
  tasksByProcessAndStatus(processId: Int!, statusId: Int!): [Task!]!
  subtasksByProcess(processId: Int!): [Subtask!]!
  tasksByMonth(monthName: String!, year: Int!): [Task!]!
  tasksByMonthAndProcess(monthName: String!, year: Int!, processId: Int!): [Task!]!
  tasksByProcessWithCompliance(processId: Int!): [Task!]!
  subtasks: [Subtask!]!
  subtask(id: ID!): Subtask!
  priorities: [Priority!]!
  subtaskStatuses: [SubtaskStatus!]!
  subtasksByMonthYearAndProcess(monthName: String!, year: Int!, processId: Int!): [Subtask!]!
  findAllCompliances: [Compliance!]!
  findOneCompliance(id: ID!): Compliance
  getTaskCompliance(taskId: ID!): Compliance
  getAllComplianceStatuses: [ComplianceStatus!]!
  getCompliancesByStatus(statusId: Int!): [Compliance!]!
  getActiveCompliances: [Compliance!]!
  beneficiaries: [Beneficiary!]!
  beneficiary(id: ID!): Beneficiary!
  contacts: [Contact!]!
  contact(id: ID!): Contact!
  infoTasks: [InfoTask!]!
  infoTask(id: ID!): InfoTask!
  taskInfo(id: ID!): InfoTask!
  investmentTasksCount(investmentId: Int!): Int!
  tasksByOrigin(originId: Int!): [InfoTask!]!
  tasksByInvestment(investmentId: Int!): [InfoTask!]!
  tasksByType(typeId: Int!): [InfoTask!]!
  tasksByScope(scopeId: Int!): [InfoTask!]!
  tasksByInteraction(interactionId: Int!): [InfoTask!]!
  tasksByRisk(riskId: Int!): [InfoTask!]!
  originTasksCount(originId: Int!): Int!
  typeTasksCount(typeId: Int!): Int!
  scopeTasksCount(scopeId: Int!): Int!
  interactionTasksCount(interactionId: Int!): Int!
  riskTasksCount(riskId: Int!): Int!
  origins: [Origin!]!
  origin(id: Int!): Origin!
  investments: [Investment!]!
  investment(id: Int!): Investment!
  types: [Type!]!
  type(id: Int!): Type!
  scopes: [Scope!]!
  scope(id: Int!): Scope!
  interactions: [Interaction!]!
  interaction(id: Int!): Interaction!
  risks: [Risk!]!
  risk(id: Int!): Risk!
  documents(tipo_documento: Int): [Document!]!
  document(id_documento: String!): Document!
  getAllDocumentTypes: [TipoDocumento!]!
  documentByTaskAndType(taskId: String!, documentType: Int!): Document
  histories: [History!]!
  history(id: ID!): History
  historiesByProcess(processId: Int!): [History!]!
  historiesByValley(valleyId: Int!): [History!]!
  historiesByFaena(faenaId: Int!): [History!]!
  historiesByBeneficiary(beneficiaryId: ID!): [History!]!
  users: [User!]!
  user(id: ID!): User!
  roles: [Rol!]!
  validateResetToken(token: String!): TokenValidationResponse!
  myNotifications: [Notification!]!
  unreadNotificationsCount: Int!
}

type Mutation {
  createTask(input: CreateTaskDto!): Task!
  updateTask(id: ID!, input: UpdateTaskDto!): Task!
  removeTask(id: ID!): Task!
  createSubtask(input: CreateSubtaskDto!): Subtask!
  updateSubtask(id: ID!, input: UpdateSubtaskDto!): Subtask!
  removeSubtask(id: ID!): Subtask!
  createCompliance(createComplianceInput: CreateComplianceInput!): Compliance!
  updateCompliance(id: ID!, updateComplianceInput: UpdateComplianceInput!): Compliance!
  removeCompliance(id: ID!): String!
  advanceComplianceStatus(id: ID!): Compliance!
  createBeneficiary(input: CreateBeneficiaryDto!): Beneficiary!
  updateBeneficiary(id: ID!, input: UpdateBeneficiaryDto!): Beneficiary!
  removeBeneficiary(id: ID!): Beneficiary!
  createContact(input: CreateContactDto!): Contact!
  updateContact(id: ID!, input: UpdateContactDto!): Contact!
  removeContact(id: ID!): Contact!
  createInfoTask(createInfoTaskInput: CreateInfoTaskInput!): InfoTask!
  updateInfoTask(id: ID!, updateInfoTaskInput: UpdateInfoTaskInput!): InfoTask!
  removeInfoTask(id: ID!): InfoTask!
  createDocument(input: CreateDocumentInput!): Document!
  deleteDocument(id_documento: String!): Boolean!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: ID!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): Boolean!
  deactivateUser(id: ID!): User!
  activateUser(id: ID!): User!
  register(registerInput: CreateUserInput!): AuthResponse!
  login(loginInput: LoginInput!): AuthResponse!
  requestPasswordReset(input: RequestPasswordResetInput!): PasswordResetResponse!
  resetPassword(input: ResetPasswordInput!): PasswordResetResponse!
  markNotificationAsRead(notificationId: String!): NotificationResponse!
  createNotification(input: CreateNotificationInput!): Notification!
}

input CreateTaskDto {
  name: String
  description: String
  valleyId: Int
  faenaId: Int
  processId: Int
  statusId: Int
  applies: Boolean
  beneficiaryId: String
}

input UpdateTaskDto {
  name: String
  description: String
  valleyId: Int
  faenaId: Int
  processId: Int
  statusId: Int
  applies: Boolean
  beneficiaryId: String
}

input CreateSubtaskDto {
  taskId: ID!
  name: String
  description: String
  budget: Int
  expense: Int
  startDate: DateTime
  endDate: DateTime
  finalDate: DateTime
  statusId: Int
  priorityId: Int
}

input UpdateSubtaskDto {
  name: String
  description: String
  taskId: ID
  statusId: Int
  priorityId: Int
  budget: Int
  expense: Int
  startDate: DateTime
  endDate: DateTime
  finalDate: DateTime
}

input CreateComplianceInput {
  taskId: ID!
  statusId: Int
}

input UpdateComplianceInput {
  taskId: ID
  statusId: Int
  valor: Int
  ceco: Int
  cuenta: Int
  solpedMemoSap: Int
  hesHemSap: Int
  listo: Boolean
}

input CreateBeneficiaryDto {
  legalName: String
  rut: String
  address: String
  entityType: String
  representative: String
  hasLegalPersonality: Boolean
}

input UpdateBeneficiaryDto {
  legalName: String
  rut: String
  address: String
  entityType: String
  representative: String
  hasLegalPersonality: Boolean
}

input CreateContactDto {
  beneficiaryId: ID!
  name: String
  position: String
  email: String
  phone: String
}

input UpdateContactDto {
  beneficiaryId: ID
  name: String
  position: String
  email: String
  phone: String
}

input CreateInfoTaskInput {
  taskId: ID!
  originId: Int
  investmentId: Int
  typeId: Int
  scopeId: Int
  interactionId: Int
  riskId: Int
}

input UpdateInfoTaskInput {
  taskId: ID
  originId: Int
  investmentId: Int
  typeId: Int
  scopeId: Int
  interactionId: Int
  riskId: Int
}

input CreateDocumentInput {
  tipo_documento: Int!
  ruta: String!
  id_tarea: String
  nombre_archivo: String
}

input CreateUserInput {
  email: String!
  password: String!
  full_name: String!
  id_rol: Int
  organization: String
}

input UpdateUserInput {
  email: String
  password: String
  full_name: String
  id_rol: Int
  organization: String
  is_active: Boolean
}

input LoginInput {
  email: String!
  password: String!
}

input RequestPasswordResetInput {
  email: String!
  frontendUrl: String!
}

input ResetPasswordInput {
  token: String!
  newPassword: String!
}

input CreateNotificationInput {
  id_usuario: ID!
  titulo: String!
  mensaje: String!
  id_tarea: ID
}