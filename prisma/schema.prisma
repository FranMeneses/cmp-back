generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "library"
}

datasource db {
  provider  = "sqlserver"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model alcance {
  id_alcance   Int          @id(map: "PK_alcance") @default(autoincrement())
  alcance_name String?      @db.NVarChar(50)
  info_tarea   info_tarea[]
}

model beneficiario {
  id_beneficiario       String      @id(clustered: false, map: "PK_beneficiario") @default(dbgenerated("newsequentialid()"), map: "DF__beneficia__id_be__73BA3083") @db.UniqueIdentifier
  nombre_legal          String?     @db.NVarChar(50)
  rut                   String?     @db.NVarChar(50)
  direccion             String?     @db.NVarChar(50)
  tipo_entidad          String?     @db.NVarChar(50)
  representante         String?     @db.NVarChar(50)
  personalidad_juridica Boolean?
  contacto              contacto[]
  historiales           historial[] @relation("historial_beneficiarioTobeneficiario")
  tareas                tarea[]     @relation("tarea_beneficiarioTobeneficiario")
}

model contacto {
  id_contacto     String       @id(clustered: false, map: "PK_contacto") @default(dbgenerated("newsequentialid()"), map: "DF__contacto__id_con__76969D2E") @db.UniqueIdentifier
  id_beneficiario String       @db.UniqueIdentifier
  nombre          String?      @db.NVarChar(50)
  cargo           String?      @db.NVarChar(50)
  mail            String?      @db.NVarChar(50)
  phone           String?      @db.NVarChar(50)
  beneficiario    beneficiario @relation(fields: [id_beneficiario], references: [id_beneficiario], onDelete: Cascade, onUpdate: NoAction, map: "FK_contacto_beneficiario")
}

model cumplimiento {
  id_cumplimiento     String               @id(clustered: false, map: "PK_cumplimiento") @default(dbgenerated("newsequentialid()"), map: "DF__cumplimie__id_cu__46B27FE2") @db.UniqueIdentifier
  id_tarea            String               @db.UniqueIdentifier
  id_cump_est         Int?                 @default(1, map: "DF__cumplimie__id_cu__47A6A41B")
  updated_at          DateTime?            @default(now(), map: "DF__cumplimie__updat__0A688BB1") @db.DateTime
  cumplimiento_estado cumplimiento_estado? @relation(fields: [id_cump_est], references: [id_cumplimiento_estado], onDelete: Cascade, onUpdate: NoAction, map: "FK_cump_est")
  tarea               tarea                @relation(fields: [id_tarea], references: [id_tarea], onDelete: Cascade, onUpdate: NoAction, map: "FK_cumplimiento_tarea")
  registro            registro[]
}

model cumplimiento_estado {
  id_cumplimiento_estado Int            @id(map: "PK_cumplimiento_estado") @default(autoincrement())
  estado                 String?        @db.NVarChar(50)
  dias                   Int?
  cumplimiento           cumplimiento[]
}

model documento {
  id_documento   String         @id(clustered: false, map: "PK_documento") @default(dbgenerated("newsequentialid()"), map: "DF__documento__id_do__57DD0BE4") @db.UniqueIdentifier
  id_tarea       String?        @db.UniqueIdentifier
  nombre_archivo String?        @db.NVarChar(255)
  tipo_documento Int
  ruta           String?        @db.NVarChar(500)
  fecha_carga    DateTime?      @db.Date
  tarea          tarea?         @relation(fields: [id_tarea], references: [id_tarea], onDelete: NoAction, onUpdate: NoAction, map: "FK_documento_tarea")
  tipo_doc       tipo_documento @relation("documento_tipo_documento", fields: [tipo_documento], references: [id_tipo_documento], onDelete: Cascade, onUpdate: NoAction, map: "FK_documento_tipo_documento")
}

model faena {
  id_faena    Int         @id(map: "PK_faena") @default(autoincrement()) @map("id_faena")
  faena_name  String?     @map("faena_name") @db.NVarChar(50)
  historiales historial[]
  tareas      tarea[]
}

model info_tarea {
  id_info_tarea  String       @id(clustered: false, map: "PK_info_tarea") @default(dbgenerated("newsequentialid()"), map: "DF__info_tare__id_in__30C33EC3") @db.UniqueIdentifier
  id_tarea       String       @db.UniqueIdentifier
  id_origen      Int?
  id_inversion   Int?
  id_tipo        Int?
  id_alcance     Int?
  id_interaccion Int?
  id_riesgo      Int?
  tarea          tarea        @relation(fields: [id_tarea], references: [id_tarea], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea")
  alcance        alcance?     @relation(fields: [id_alcance], references: [id_alcance], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_alcance")
  interaccion    interaccion? @relation(fields: [id_interaccion], references: [id_interaccion], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_interaccion")
  inversion      inversion?   @relation(fields: [id_inversion], references: [id_inversion], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_inversion")
  origen         origen?      @relation(fields: [id_origen], references: [id_origen], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_origen")
  riesgo         riesgo?      @relation(fields: [id_riesgo], references: [id_riesgo], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_riesgo")
  tipo           tipo?        @relation(fields: [id_tipo], references: [id_tipo], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_tipo")
}

model interaccion {
  id_interaccion Int          @id(map: "PK_interaccion") @default(autoincrement())
  operacion      String?      @db.NVarChar(50)
  info_tarea     info_tarea[]
}

model inversion {
  id_inversion Int          @id(map: "PK_inversion") @default(autoincrement())
  linea        String?      @db.NVarChar(50)
  info_tarea   info_tarea[]
}

model memo {
  id_memo     String   @id(clustered: false, map: "PK_memo") @default(dbgenerated("newsequentialid()"), map: "DF__memo__id_memo__503BEA1C") @db.UniqueIdentifier
  id_registro String   @db.UniqueIdentifier
  valor       Int?
  registro    registro @relation(fields: [id_registro], references: [id_registro], onUpdate: NoAction, map: "FK_memo_registro")
}

model origen {
  id_origen   Int          @id(map: "PK_origen") @default(autoincrement())
  origen_name String?      @db.NVarChar(65)
  info_tarea  info_tarea[]
}

model prioridad {
  id_prioridad   Int        @id(map: "PK_prioridad") @default(autoincrement())
  prioridad_name String?    @db.NVarChar(30)
  subtarea       subtarea[]
}

model proceso {
  id_proceso   Int         @id(map: "PK_proceso") @default(autoincrement()) @map("id_proceso")
  proceso_name String      @map("proceso_name") @db.NVarChar(50)
  historiales  historial[]
  tareas       tarea[]     @relation("tarea_procesoToproceso")
}

model registro {
  id_registro     String       @id(clustered: false, map: "PK_registro") @default(dbgenerated("newsequentialid()"), map: "DF__registro__id_reg__4C6B5938") @db.UniqueIdentifier
  id_cumplimiento String       @db.UniqueIdentifier
  hes             Boolean?
  hem             Boolean?
  proveedor       String?      @db.NVarChar(100)
  fecha_inicio    DateTime?    @db.Date
  fecha_termino   DateTime?    @db.Date
  carta           Boolean?
  minuta          Boolean?
  es_solped       Boolean?
  es_memo         Boolean?
  SOLPED_MEMO_SAP Int?
  HES_HEM_SAP     Int?
  memo            memo[]
  cumplimiento    cumplimiento @relation(fields: [id_cumplimiento], references: [id_cumplimiento], onUpdate: NoAction, map: "FK_registro_cumplimiento")
  solped          solped[]
}

model riesgo {
  id_riesgo   Int          @id(map: "PK_riesgo") @default(autoincrement())
  tipo_riesgo String?      @db.NVarChar(50)
  info_tarea  info_tarea[]
}

model solped {
  id_solped   String   @id(clustered: false, map: "PK_solped") @default(dbgenerated("newsequentialid()"), map: "DF__solped__id_solpe__540C7B00") @db.UniqueIdentifier
  id_registro String   @db.UniqueIdentifier
  ceco        Int?
  cuenta      Int?
  valor       Int?
  registro    registro @relation(fields: [id_registro], references: [id_registro], onUpdate: NoAction, map: "FK_solped_registro")
}

model subtarea {
  id_subtarea     String           @id(clustered: false, map: "PK_subtarea") @default(dbgenerated("newsequentialid()"), map: "DF__subtarea__id_sub__3A4CA8FD") @db.UniqueIdentifier
  id_tarea        String           @db.UniqueIdentifier
  nombre          String?          @db.NVarChar(100)
  descripcion     String?          @db.NVarChar(500)
  presupuesto     Int?
  gasto           Int?
  fecha_inicio    DateTime?        @db.Date
  fecha_termino   DateTime?        @db.Date
  fecha_final     DateTime?        @db.Date
  id_estado       Int?             @default(1, map: "DF__subtarea__id_est__3B40CD36")
  id_prioridad    Int?
  subtarea_estado subtarea_estado? @relation(fields: [id_estado], references: [id_subtarea_estado], onDelete: Cascade, onUpdate: NoAction, map: "FK_subtarea_estado")
  prioridad       prioridad?       @relation(fields: [id_prioridad], references: [id_prioridad], onDelete: Cascade, onUpdate: NoAction, map: "FK_subtarea_prioridad")
  tarea           tarea            @relation(fields: [id_tarea], references: [id_tarea], onDelete: Cascade, onUpdate: NoAction, map: "FK_subtarea_tarea")
}

model subtarea_estado {
  id_subtarea_estado Int        @id(map: "PK_subtarea_estado") @default(autoincrement())
  estado             String?    @db.NVarChar(50)
  porcentaje         Int?
  subtarea           subtarea[]
}

model tarea {
  id_tarea         String         @id(clustered: false, map: "PK_tarea") @default(dbgenerated("newsequentialid()"), map: "DF__tarea__id_tarea__282DF8C2") @db.UniqueIdentifier
  id_valle         Int?
  id_faena         Int?
  nombre           String?        @db.NVarChar(100)
  descripcion      String?        @db.NVarChar(500)
  estado           Int?           @default(1, map: "DF__tarea__estado__29221CFB")
  proceso          Int?
  aplica           Boolean?
  beneficiario     String?        @db.UniqueIdentifier
  cumplimiento     cumplimiento[]
  documento        documento[]
  info_tarea       info_tarea[]
  notificacion     notificacion[]
  subtarea         subtarea[]
  beneficiario_rel beneficiario?  @relation("tarea_beneficiarioTobeneficiario", fields: [beneficiario], references: [id_beneficiario], onDelete: NoAction, onUpdate: NoAction, map: "FK_tarea_beneficiario")
  tarea_estado     tarea_estado?  @relation(fields: [estado], references: [id_tarea_estado], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_estado")
  faena            faena?         @relation(fields: [id_faena], references: [id_faena], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_faena")
  proceso_rel      proceso?       @relation("tarea_procesoToproceso", fields: [proceso], references: [id_proceso], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_proceso")
  valle            valle?         @relation(fields: [id_valle], references: [id_valle], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_valle")
}

model tarea_estado {
  id_tarea_estado Int     @id(map: "PK_tarea_estado") @default(autoincrement())
  estado          String? @db.NVarChar(50)
  tarea           tarea[]
}

model tipo {
  id_tipo    Int          @id(map: "PK_tipo") @default(autoincrement())
  tipo_name  String?      @db.NVarChar(50)
  info_tarea info_tarea[]
}

model tipo_documento {
  id_tipo_documento Int             @id(map: "PK_tipo_documento") @default(autoincrement()) @map("id_tipo_documento")
  tipo_documento    String?         @map("tipo_documento") @db.NVarChar(50)
  documentos        documento[]     @relation("documento_tipo_documento")
  historial_docs    historial_doc[]
}

model valle {
  id_valle    Int         @id(map: "PK_valle") @default(autoincrement()) @map("id_valle")
  valle_name  String?     @map("valle_name") @db.NVarChar(50)
  historiales historial[]
  tareas      tarea[]
}

model historial {
  id_historial     String          @id(clustered: false, map: "PK_historial") @default(dbgenerated("newsequentialid()"), map: "DF__historial__id_hi__625A9A57") @map("id_historial") @db.UniqueIdentifier
  nombre           String?         @map("nombre") @db.NVarChar(50)
  id_proceso       Int?            @map("id_proceso")
  fecha_final      DateTime?       @map("fecha_final") @db.Date
  gasto_total      Int?            @map("gasto_total")
  id_valle         Int?            @map("id_valle")
  id_faena         Int?            @map("id_faena")
  SOLPED_MEMO_SAP  Int?            @map("SOLPED_MEMO_SAP")
  HES_HEM_SAP      Int?            @map("HES_HEM_SAP")
  beneficiario     String?         @db.UniqueIdentifier
  beneficiario_rel beneficiario?   @relation("historial_beneficiarioTobeneficiario", fields: [beneficiario], references: [id_beneficiario], onDelete: NoAction, onUpdate: NoAction, map: "FK_his_beneficiario")
  faena            faena?          @relation(fields: [id_faena], references: [id_faena], onDelete: NoAction, onUpdate: NoAction, map: "FK_his_faena")
  proceso          proceso?        @relation(fields: [id_proceso], references: [id_proceso], onDelete: NoAction, onUpdate: NoAction, map: "FK_his_proceso")
  valle            valle?          @relation(fields: [id_valle], references: [id_valle], onDelete: NoAction, onUpdate: NoAction, map: "FK_his_valle")
  historial_doc    historial_doc[]

  @@map("historial")
}

model historial_doc {
  id_his_doc     String         @id(clustered: false, map: "PK_his_doc") @default(dbgenerated("newsequentialid()"), map: "DF__historial__id_hi__690797E6") @map("id_his_doc") @db.UniqueIdentifier
  id_historial   String?        @map("id_historial") @db.UniqueIdentifier
  nombre_archivo String?        @map("nombre_archivo") @db.NVarChar(255)
  tipo_documento Int            @map("tipo_documento")
  ruta           String?        @map("ruta") @db.NVarChar(500)
  fecha_carga    DateTime?      @map("fecha_carga") @db.Date
  historial      historial?     @relation(fields: [id_historial], references: [id_historial], onDelete: NoAction, onUpdate: NoAction, map: "FK_his_doc_historial")
  tipo_doc       tipo_documento @relation(fields: [tipo_documento], references: [id_tipo_documento], onUpdate: NoAction, map: "FK_his_doc_tipo_documento")

  @@map("historial_doc")
}

model rol {
  id_rol  Int       @id(clustered: false, map: "PK_rol") @default(autoincrement())
  nombre  String    @db.NVarChar(50)
  usuario usuario[]
}

model usuario {
  id_usuario           String                 @id(clustered: false, map: "PK_usuario") @default(dbgenerated("newsequentialid()"), map: "DF__usuario__id_usua__7849DB76") @db.UniqueIdentifier
  email                String                 @unique(map: "UQ__usuario__AB6E6164A1FD1FE7") @db.NVarChar(255)
  password_hash        String                 @db.NVarChar(255)
  full_name            String                 @db.NVarChar(255)
  id_rol               Int
  organization         String?                @db.NVarChar(255)
  is_active            Boolean?               @default(true, map: "DF__usuario__is_acti__793DFFAF")
  created_at           DateTime?              @default(now(), map: "DF__usuario__created__7A3223E8") @db.DateTime
  updated_at           DateTime?              @default(now(), map: "DF__usuario__updated__7B264821") @db.DateTime
  last_login           DateTime?              @db.DateTime
  notificacion         notificacion[]
  password_reset_token password_reset_token[]
  rol                  rol                    @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade, onUpdate: NoAction, map: "FK_usuario_rol")
}

model password_reset_token {
  id_token   String   @id(clustered: false, map: "PK_password_reset_token") @default(dbgenerated("newsequentialid()"), map: "DF_password_reset_token_id_token") @db.UniqueIdentifier
  id_usuario String   @db.UniqueIdentifier
  token      String   @unique(map: "UQ_password_reset_token_token") @db.NVarChar(255)
  expires_at DateTime @db.DateTime
  used       Boolean  @default(false, map: "DF_password_reset_token_used")
  created_at DateTime @default(now(), map: "DF_password_reset_token_created_at") @db.DateTime
  usuario    usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction, map: "FK_password_reset_token_usuario")

  @@index([id_usuario], map: "IX_password_reset_token_id_usuario")
  @@index([token], map: "IX_password_reset_token_token")
}

model notificacion {
  id_notificacion String    @id(clustered: false, map: "PK_notificacion") @default(dbgenerated("newsequentialid()"), map: "DF__notificac__id_no__05A3D694") @db.UniqueIdentifier
  id_usuario      String    @db.UniqueIdentifier
  titulo          String    @db.NVarChar(255)
  mensaje         String    @db.NVarChar(Max)
  leida           Boolean?  @default(false, map: "DF__notificac__leida__0697FACD")
  read_at         DateTime? @db.DateTime
  created_at      DateTime? @default(now(), map: "DF__notificac__creat__078C1F06") @db.DateTime
  id_tarea        String?   @db.UniqueIdentifier
  tarea           tarea?    @relation(fields: [id_tarea], references: [id_tarea], onUpdate: NoAction, map: "FK_notificacion_tarea")
  usuario         usuario   @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction, map: "FK_notificacion_usuario")

  @@index([read_at], map: "IX_notificacion_read_at")
}
