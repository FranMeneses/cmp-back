generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model alcance {
  id_alcance   Int          @id(map: "PK_alcance") @default(autoincrement())
  alcance_name String?      @db.NVarChar(50)
  info_tarea   info_tarea[]
}

model beneficiario {
  id_beneficiario       String     @id(clustered: false, map: "PK_beneficiario") @default(dbgenerated("newsequentialid()"), map: "DF__beneficia__id_be__160F4887") @db.UniqueIdentifier
  nombre_legal          String?    @db.NVarChar(50)
  rut                   String?    @db.NVarChar(50)
  direccion             String?    @db.NVarChar(50)
  tipo_entidad          String?    @db.NVarChar(50)
  representante         String?    @db.NVarChar(50)
  personalidad_juridica Boolean?
  contacto              contacto[]
  subtarea              subtarea[]
}

model contacto {
  id_contacto     String       @id(clustered: false, map: "PK_contacto") @default(dbgenerated("newsequentialid()"), map: "DF__contacto__id_con__18EBB532") @db.UniqueIdentifier
  id_beneficiario String       @db.UniqueIdentifier
  nombre          String?      @db.NVarChar(50)
  cargo           String?      @db.NVarChar(50)
  mail            String?      @db.NVarChar(50)
  phone           String?      @db.NVarChar(50)
  beneficiario    beneficiario @relation(fields: [id_beneficiario], references: [id_beneficiario], onDelete: Cascade, onUpdate: NoAction, map: "FK_contacto_beneficiario")
}

model cumplimiento {
  id_cumplimiento     String               @id(clustered: false, map: "PK_cumplimiento") @default(dbgenerated("newsequentialid()"), map: "DF__cumplimie__id_cu__3F115E1A") @db.UniqueIdentifier
  id_tarea            String               @db.UniqueIdentifier
  id_cump_est         Int?                 @default(1, map: "DF__cumplimie__id_cu__40058253")
  aplica              Boolean?
  cumplimiento_estado cumplimiento_estado? @relation(fields: [id_cump_est], references: [id_cumplimiento_estado], onDelete: Cascade, onUpdate: NoAction, map: "FK_cump_est")
  tarea               tarea                @relation(fields: [id_tarea], references: [id_tarea], onDelete: Cascade, onUpdate: NoAction, map: "FK_cumplimiento_tarea")
  registro            registro[]
}

model cumplimiento_estado {
  id_cumplimiento_estado Int            @id(map: "PK_cumplimiento_estado") @default(autoincrement())
  estado                 String?        @db.NVarChar(50)
  dias                   Int?
  cumplimiento           cumplimiento[]
}

model documento {
  id_documento   String         @id(clustered: false, map: "PK_documento") @default(dbgenerated("newsequentialid()"), map: "DF__documento__id_do__395884C4") @db.UniqueIdentifier
  id_tarea       String?        @db.UniqueIdentifier
  id_subtarea    String?        @db.UniqueIdentifier
  nombre_archivo String?        @db.NVarChar(255)
  tipo_documento Int
  ruta           String?        @db.NVarChar(500)
  fecha_carga    DateTime?      @db.Date
  subtarea       subtarea?      @relation(fields: [id_subtarea], references: [id_subtarea], onDelete: NoAction, onUpdate: NoAction, map: "FK_documento_subtarea")
  tarea          tarea?         @relation(fields: [id_tarea], references: [id_tarea], onDelete: NoAction, onUpdate: NoAction, map: "FK_documento_tarea")
  tipo_doc       tipo_documento @relation("documento_tipo_documento", fields: [tipo_documento], references: [id_tipo_documento], onDelete: Cascade, onUpdate: NoAction, map: "FK_documento_tipo_documento")
}

model faena {
  id_faena   Int     @id(map: "PK_faena") @default(autoincrement())
  faena_name String? @db.NVarChar(50)
  tarea      tarea[]
}

model info_tarea {
  id_info_tarea  String       @id(clustered: false, map: "PK_info_tarea") @default(dbgenerated("newsequentialid()"), map: "DF__info_tare__id_in__2645B050") @db.UniqueIdentifier
  id_tarea       String       @db.UniqueIdentifier
  id_origen      Int?
  id_inversion   Int?
  id_tipo        Int?
  id_alcance     Int?
  id_interaccion Int?
  id_riesgo      Int?
  tarea          tarea        @relation(fields: [id_tarea], references: [id_tarea], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea")
  alcance        alcance?     @relation(fields: [id_alcance], references: [id_alcance], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_alcance")
  interaccion    interaccion? @relation(fields: [id_interaccion], references: [id_interaccion], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_interaccion")
  inversion      inversion?   @relation(fields: [id_inversion], references: [id_inversion], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_inversion")
  origen         origen?      @relation(fields: [id_origen], references: [id_origen], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_origen")
  riesgo         riesgo?      @relation(fields: [id_riesgo], references: [id_riesgo], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_riesgo")
  tipo           tipo?        @relation(fields: [id_tipo], references: [id_tipo], onDelete: Cascade, onUpdate: NoAction, map: "FK_info_tarea_tipo")
}

model interaccion {
  id_interaccion Int          @id(map: "PK_interaccion") @default(autoincrement())
  operacion      String?      @db.NVarChar(50)
  info_tarea     info_tarea[]
}

model inversion {
  id_inversion Int          @id(map: "PK_inversion") @default(autoincrement())
  linea        String?      @db.NVarChar(50)
  info_tarea   info_tarea[]
}

model memo {
  id_memo     String   @id(clustered: false, map: "PK_memo") @default(dbgenerated("newsequentialid()"), map: "DF__memo__id_memo__489AC854") @db.UniqueIdentifier
  id_registro String   @db.UniqueIdentifier
  valor       Int?
  registro    registro @relation(fields: [id_registro], references: [id_registro], onUpdate: NoAction, map: "FK_memo_registro")
}

model origen {
  id_origen   Int          @id(map: "PK_origen") @default(autoincrement())
  origen_name String?      @db.NVarChar(65)
  info_tarea  info_tarea[]
}

model prioridad {
  id_prioridad   Int        @id(map: "PK_prioridad") @default(autoincrement())
  prioridad_name String?    @db.NVarChar(30)
  subtarea       subtarea[]
}

model proceso {
  id_proceso   Int     @id(map: "PK_proceso") @default(autoincrement())
  proceso_name String  @db.NVarChar(50)
  tareas       tarea[] @relation("tarea_procesoToproceso")
}

model registro {
  id_registro     String       @id(clustered: false, map: "PK_registro") @default(dbgenerated("newsequentialid()"), map: "DF__registro__id_reg__44CA3770") @db.UniqueIdentifier
  id_cumplimiento String       @db.UniqueIdentifier
  hes             Boolean?
  hem             Boolean?
  proveedor       String?      @db.NVarChar(100)
  fecha_inicio    DateTime?    @db.Date
  fecha_termino   DateTime?    @db.Date
  memo            memo[]
  cumplimiento    cumplimiento @relation(fields: [id_cumplimiento], references: [id_cumplimiento], onUpdate: NoAction, map: "FK_registro_cumplimiento")
  solped          solped[]
}

model riesgo {
  id_riesgo   Int          @id(map: "PK_riesgo") @default(autoincrement())
  tipo_riesgo String?      @db.NVarChar(50)
  info_tarea  info_tarea[]
}

model solped {
  id_solped   String   @id(clustered: false, map: "PK_solped") @default(dbgenerated("newsequentialid()"), map: "DF__solped__id_solpe__4C6B5938") @db.UniqueIdentifier
  id_registro String   @db.UniqueIdentifier
  ceco        Int?
  cuenta      Int?
  valor       Int?
  registro    registro @relation(fields: [id_registro], references: [id_registro], onUpdate: NoAction, map: "FK_solped_registro")
}

model subtarea {
  id_subtarea     String           @id(clustered: false, map: "PK_subtarea") @default(dbgenerated("newsequentialid()"), map: "DF__subtarea__id_sub__2FCF1A8A") @db.UniqueIdentifier
  id_tarea        String           @db.UniqueIdentifier
  nombre          String?          @db.NVarChar(100)
  descripcion     String?          @db.NVarChar(500)
  presupuesto     Int?
  gasto           Int?
  fecha_inicio    DateTime?        @db.Date
  fecha_termino   DateTime?        @db.Date
  fecha_final     DateTime?        @db.Date
  id_beneficiario String?          @db.UniqueIdentifier
  id_estado       Int?             @default(1, map: "DF__subtarea__id_est__30C33EC3")
  id_prioridad    Int?
  documento       documento[]
  beneficiario    beneficiario?    @relation(fields: [id_beneficiario], references: [id_beneficiario], onDelete: Cascade, onUpdate: NoAction, map: "FK_subtarea_beneficiario")
  subtarea_estado subtarea_estado? @relation(fields: [id_estado], references: [id_subtarea_estado], onDelete: Cascade, onUpdate: NoAction, map: "FK_subtarea_estado")
  prioridad       prioridad?       @relation(fields: [id_prioridad], references: [id_prioridad], onDelete: Cascade, onUpdate: NoAction, map: "FK_subtarea_prioridad")
  tarea           tarea            @relation(fields: [id_tarea], references: [id_tarea], onDelete: Cascade, onUpdate: NoAction, map: "FK_subtarea_tarea")
}

model subtarea_estado {
  id_subtarea_estado Int        @id(map: "PK_subtarea_estado") @default(autoincrement())
  estado             String?    @db.NVarChar(50)
  porcentaje         Int?
  subtarea           subtarea[]
}

model tarea {
  id_tarea     String         @id(clustered: false, map: "PK_tarea") @default(dbgenerated("newsequentialid()"), map: "DF__tarea__id_tarea__1EA48E88") @db.UniqueIdentifier
  id_valle     Int?
  id_faena     Int?
  nombre       String?        @db.NVarChar(100)
  descripcion  String?        @db.NVarChar(500)
  estado       Int?           @default(1, map: "DF__tarea__estado__1F98B2C1")
  proceso      Int?
  cumplimiento cumplimiento[]
  documento    documento[]
  info_tarea   info_tarea[]
  subtarea     subtarea[]
  tarea_estado tarea_estado?  @relation(fields: [estado], references: [id_tarea_estado], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_estado")
  faena        faena?         @relation(fields: [id_faena], references: [id_faena], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_faena")
  proceso_rel  proceso?       @relation("tarea_procesoToproceso", fields: [proceso], references: [id_proceso], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_proceso")
  valle        valle?         @relation(fields: [id_valle], references: [id_valle], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarea_valle")
}

model tarea_estado {
  id_tarea_estado Int     @id(map: "PK_tarea_estado") @default(autoincrement())
  estado          String? @db.NVarChar(50)
  tarea           tarea[]
}

model tipo {
  id_tipo    Int          @id(map: "PK_tipo") @default(autoincrement())
  tipo_name  String?      @db.NVarChar(50)
  info_tarea info_tarea[]
}

model tipo_documento {
  id_tipo_documento Int         @id(map: "PK_tipo_documento") @default(autoincrement())
  tipo_documento    String?     @db.NVarChar(50)
  documentos        documento[] @relation("documento_tipo_documento")
}

model valle {
  id_valle   Int     @id(map: "PK_valle") @default(autoincrement())
  valle_name String? @db.NVarChar(50)
  tarea      tarea[]
}
